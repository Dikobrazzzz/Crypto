// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interface.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	models "crypto/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWalletProvider is a mock of WalletProvider interface.
type MockWalletProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWalletProviderMockRecorder
}

// MockWalletProviderMockRecorder is the mock recorder for MockWalletProvider.
type MockWalletProviderMockRecorder struct {
	mock *MockWalletProvider
}

// NewMockWalletProvider creates a new mock instance.
func NewMockWalletProvider(ctrl *gomock.Controller) *MockWalletProvider {
	mock := &MockWalletProvider{ctrl: ctrl}
	mock.recorder = &MockWalletProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletProvider) EXPECT() *MockWalletProviderMockRecorder {
	return m.recorder
}

// CreateAddress mocks base method.
func (m *MockWalletProvider) CreateAddress(ctx context.Context, req *models.AddressRequest) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", ctx, req)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockWalletProviderMockRecorder) CreateAddress(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockWalletProvider)(nil).CreateAddress), ctx, req)
}

// EditTag mocks base method.
func (m *MockWalletProvider) EditTag(ctx context.Context, req *models.TagUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTag", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditTag indicates an expected call of EditTag.
func (mr *MockWalletProviderMockRecorder) EditTag(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTag", reflect.TypeOf((*MockWalletProvider)(nil).EditTag), ctx, req)
}

// GetAllWallets mocks base method.
func (m *MockWalletProvider) GetAllWallets(ctx context.Context) ([]models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWallets", ctx)
	ret0, _ := ret[0].([]models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWallets indicates an expected call of GetAllWallets.
func (mr *MockWalletProviderMockRecorder) GetAllWallets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWallets", reflect.TypeOf((*MockWalletProvider)(nil).GetAllWallets), ctx)
}

// GetID mocks base method.
func (m *MockWalletProvider) GetID(ctx context.Context, id uint64) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID", ctx, id)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetID indicates an expected call of GetID.
func (mr *MockWalletProviderMockRecorder) GetID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockWalletProvider)(nil).GetID), ctx, id)
}
